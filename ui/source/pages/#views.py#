import os
import re
import subprocess
import json
from django.shortcuts import render
from django.template import loader
from pages.models import Task

# Create your views here.

# pages/views.py
from django.http import HttpResponse
from django.http import JsonResponse

def isBash(text):
    return text.endswith('.sh')

def index(request):
    template = loader.get_template('pages/index.html')
    context = {}
    return HttpResponse(template.render(context, request))
    

def tasks(request):
    path = request.GET.get('path','/')
    loadPath="/opt/scripts"+path
    if not isBash(path):
        return HttpResponse("Invalid Request: Not a bash script!",status=406)
    
    env=os.environ.copy()
    file1 = open(loadPath, 'r') 
    lines = file1.readlines()
    jsonData=json.loads(request.body)
    for line in lines:
        line=line.rstrip("\n")
        p = re.compile('#[ ]*input[ ]*([a-zA-Z0-9]*)[ ]*(.*)')
        m = p.fullmatch(line)
        if m:
            key=m.group(1)
            #value=request.POST.get(key)
            value=""
            for nameValue in jsonData:
                if nameValue.get("name") == key:
                    value=nameValue.get("value")
                    break
            pattern=m.group(2)
            p2 = re.compile(pattern)
            m2 = p2.fullmatch(value)
            if not m2:
                return HttpResponse("Value [" + value + "] for input [" + key + "] does not match regexp [" + pattern + "]", status=406)
            env[key]=value

    end=loadPath.rindex('/')
    cwd=loadPath[0:end]
    env['PATH']=env['PATH']+":"+cwd
    #cp = subprocess.run(loadPath,shell=True,stdout=subprocess.PIPE,stderr=subprocess.STDOUT,cwd=cwd,env=env)
    
    context = {
       'path':path,
       'output': cp.stdout.decode(),
    }

    # Create a new record using the model's constructor.
    task = Task(inputs=json.dumps(env),script=path)
    task.save()
    
    if request.content_type == "application/json":
        outputObject = {
            'output': cp.stdout.decode(),
            'returnCode': cp.returncode
        }
        outputArray = [outputObject]
        return JsonResponse(outputArray, safe=False)
    return HttpResponse("Only JSON Is Supported",status=415)
    # template = loader.get_template('pages/tasks.html')
    # return HttpResponse(template.render(context, request))

def scripts(request):
    path = request.GET.get('path','/')
    loadPath="/opt/scripts"+path

    if not isBash(path):
        return HttpResponse("Invalid Request: Not a bash script!", status=406)

    
    # Using readlines() 
    file1 = open(loadPath, 'r') 
    lines = file1.readlines() 

    # input myText a-zA-Z*
    inputs = []
    regexps = {}
    jsonInputs = []
    for line in lines:
        line=line.rstrip("\n")
        p = re.compile('#[ ]*input[ ]*([a-zA-Z0-9]*)[ ]*(.*)')
        m = p.fullmatch(line)
        if m:
            inputs.append(m.group(1))
            regexps[m.group(1)]=m.group(2)
            jsonInputs.append({
                'input':m.group(1),
                'regexp':m.group(2)
            })
            

    context = {
        'path':path,
        'inputs': inputs,
        'regexps': regexps,
    }
    template = loader.get_template('pages/scripts.html')

    if request.content_type == "application/json":
        inputObject = { 'inputs': jsonInputs}
        inputArray = [inputObject]
        return JsonResponse(inputArray, safe=False)
    return HttpResponse("Only JSON Is Supported",status=415)
    # return HttpResponse(template.render(context, request))

def folders(request):
    path = request.GET.get('path','/')
    loadPath="/opt/scripts"+path

    if isBash(path):
        return HttpResponse("Invalid Request: Not a folder!", status=406)

    items = os.listdir(loadPath)
    folders = []
    scripts = []
        
    for item in items:
        if not isBash(item):
            folders.append(item+"/")
        else:
            scripts.append(item)

    context = {
        'path':path,
        'folders': folders,
        'scripts': scripts,
    }
    
    template = loader.get_template('pages/folders.html')

    if request.content_type == "application/json":
        paths = []
        for i in folders: 
            paths.append(i)
        for i in scripts: 
            paths.append(i)             
        pathObject = { 'paths': paths }
        pathArray = [pathObject]
        return JsonResponse(pathArray, safe=False)
    return HttpResponse("Only JSON Is Supported",status=415)    
    #return HttpResponse(template.render(context, request))
        
